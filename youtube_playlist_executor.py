#!/usr/bin/env python3
"""
YouTube Playlist Executor

This script executes the reorganization plan generated by playlist_organizer.py
using the YouTube Data API v3.
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
import pickle

class YouTubePlaylistExecutor:
    def __init__(self, credentials_file: str = "credentials.json"):
        self.credentials_file = credentials_file
        self.token_file = "token.pickle"
        self.scopes = ['https://www.googleapis.com/auth/youtube']
        self.youtube = None
        self.reorganization_plan = None
        
    def authenticate(self) -> bool:
        """Authenticate with YouTube Data API"""
        creds = None
        
        # Load existing token
        if os.path.exists(self.token_file):
            with open(self.token_file, 'rb') as token:
                creds = pickle.load(token)
        
        # If no valid credentials, get new ones
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                except Exception as e:
                    print(f"⚠️ 刷新令牌失败: {e}")
                    creds = None
            
            if not creds:
                if not os.path.exists(self.credentials_file):
                    print(f"❌ 找不到凭据文件: {self.credentials_file}")
                    print("请确保已从 Google Cloud Console 下载 credentials.json 文件")
                    return False
                
                try:
                    flow = InstalledAppFlow.from_client_secrets_file(
                        self.credentials_file, self.scopes)
                    creds = flow.run_local_server(port=0)
                except Exception as e:
                    print(f"❌ 认证失败: {e}")
                    return False
            
            # Save credentials for next run
            with open(self.token_file, 'wb') as token:
                pickle.dump(creds, token)
        
        try:
            self.youtube = build('youtube', 'v3', credentials=creds)
            print("✅ YouTube API 认证成功")
            return True
        except Exception as e:
            print(f"❌ 构建 YouTube 服务失败: {e}")
            return False
    
    def load_reorganization_plan(self, plan_file: str = "reorganization_plan.json") -> bool:
        """Load reorganization plan"""
        try:
            with open(plan_file, 'r', encoding='utf-8') as f:
                self.reorganization_plan = json.load(f)
            print(f"✅ 成功加载重组计划: {plan_file}")
            return True
        except FileNotFoundError:
            print(f"❌ 找不到重组计划文件: {plan_file}")
            return False
        except json.JSONDecodeError:
            print(f"❌ 重组计划文件格式错误: {plan_file}")
            return False
    
    def get_user_playlists(self) -> List[Dict]:
        """Get all user playlists"""
        playlists = []
        next_page_token = None
        
        while True:
            try:
                request = self.youtube.playlists().list(
                    part='snippet,status',
                    mine=True,
                    maxResults=50,
                    pageToken=next_page_token
                )
                response = request.execute()
                
                playlists.extend(response.get('items', []))
                next_page_token = response.get('nextPageToken')
                
                if not next_page_token:
                    break
                    
            except Exception as e:
                print(f"❌ 获取播放列表失败: {e}")
                break
        
        return playlists
    
    def create_playlist(self, title: str, description: str = "", privacy: str = "private") -> Optional[str]:
        """Create a new playlist"""
        try:
            request = self.youtube.playlists().insert(
                part='snippet,status',
                body={
                    'snippet': {
                        'title': title,
                        'description': description
                    },
                    'status': {
                        'privacyStatus': privacy
                    }
                }
            )
            response = request.execute()
            playlist_id = response['id']
            print(f"✅ 创建播放列表: {title} (ID: {playlist_id})")
            return playlist_id
        except Exception as e:
            print(f"❌ 创建播放列表失败 '{title}': {e}")
            return None
    
    def update_playlist(self, playlist_id: str, title: str, description: str = "") -> bool:
        """Update playlist title and description"""
        try:
            request = self.youtube.playlists().update(
                part='snippet',
                body={
                    'id': playlist_id,
                    'snippet': {
                        'title': title,
                        'description': description
                    }
                }
            )
            request.execute()
            print(f"✅ 更新播放列表: {title}")
            return True
        except Exception as e:
            print(f"❌ 更新播放列表失败 '{title}': {e}")
            return False
    
    def delete_playlist(self, playlist_id: str) -> bool:
        """Delete a playlist"""
        try:
            request = self.youtube.playlists().delete(id=playlist_id)
            request.execute()
            print(f"✅ 删除播放列表: {playlist_id}")
            return True
        except Exception as e:
            print(f"❌ 删除播放列表失败 '{playlist_id}': {e}")
            return False
    
    def get_playlist_videos(self, playlist_id: str) -> List[Dict]:
        """Get all videos from a playlist"""
        videos = []
        next_page_token = None
        
        while True:
            try:
                request = self.youtube.playlistItems().list(
                    part='snippet',
                    playlistId=playlist_id,
                    maxResults=50,
                    pageToken=next_page_token
                )
                response = request.execute()
                
                videos.extend(response.get('items', []))
                next_page_token = response.get('nextPageToken')
                
                if not next_page_token:
                    break
                    
            except Exception as e:
                print(f"❌ 获取播放列表视频失败 '{playlist_id}': {e}")
                break
        
        return videos
    
    def add_video_to_playlist(self, playlist_id: str, video_id: str, position: int = None) -> bool:
        """Add video to playlist"""
        try:
            body = {
                'snippet': {
                    'playlistId': playlist_id,
                    'resourceId': {
                        'kind': 'youtube#video',
                        'videoId': video_id
                    }
                }
            }
            
            if position is not None:
                body['snippet']['position'] = position
            
            request = self.youtube.playlistItems().insert(
                part='snippet',
                body=body
            )
            request.execute()
            return True
        except Exception as e:
            print(f"❌ 添加视频到播放列表失败: {e}")
            return False
    
    def execute_rename_suggestions(self) -> bool:
        """Execute rename suggestions"""
        if not self.reorganization_plan or 'rename_suggestions' not in self.reorganization_plan:
            return True
        
        print("\n🏷️ 执行重命名操作...")
        
        # Get current playlists
        current_playlists = self.get_user_playlists()
        playlist_map = {p['id']: p for p in current_playlists}
        
        for suggestion in self.reorganization_plan['rename_suggestions']:
            playlist_id = suggestion['id']
            new_name = suggestion['suggested_name']
            
            if playlist_id in playlist_map:
                if self.update_playlist(playlist_id, new_name):
                    print(f"   ✅ {suggestion['current_name']} → {new_name}")
                else:
                    print(f"   ❌ 重命名失败: {suggestion['current_name']}")
            else:
                print(f"   ⚠️ 找不到播放列表: {suggestion['current_name']}")
        
        return True
    
    def execute_delete_suggestions(self) -> bool:
        """Execute delete suggestions"""
        if not self.reorganization_plan or 'delete_suggestions' not in self.reorganization_plan:
            return True
        
        print("\n🗑️ 执行删除操作...")
        
        # Get current playlists
        current_playlists = self.get_user_playlists()
        playlist_map = {p['snippet']['title']: p['id'] for p in current_playlists}
        
        for suggestion in self.reorganization_plan['delete_suggestions']:
            playlist_title = suggestion['title']
            
            if playlist_title in playlist_map:
                playlist_id = playlist_map[playlist_title]
                
                # Ask for confirmation
                confirm = input(f"   确认删除播放列表 '{playlist_title}'? (y/N): ")
                if confirm.lower() == 'y':
                    if self.delete_playlist(playlist_id):
                        print(f"   ✅ 已删除: {playlist_title}")
                    else:
                        print(f"   ❌ 删除失败: {playlist_title}")
                else:
                    print(f"   ⏭️ 跳过删除: {playlist_title}")
            else:
                print(f"   ⚠️ 找不到播放列表: {playlist_title}")
        
        return True
    
    def show_execution_summary(self):
        """Show execution summary"""
        if not self.reorganization_plan:
            return
        
        print("\n" + "="*60)
        print("📋 执行摘要")
        print("="*60)
        
        print(f"\n📅 计划生成时间: {self.reorganization_plan['timestamp']}")
        print(f"📝 原始播放列表数量: {self.reorganization_plan['original_count']}")
        
        if 'rename_suggestions' in self.reorganization_plan:
            print(f"🏷️ 重命名建议: {len(self.reorganization_plan['rename_suggestions'])} 个")
        
        if 'delete_suggestions' in self.reorganization_plan:
            print(f"🗑️ 删除建议: {len(self.reorganization_plan['delete_suggestions'])} 个")
        
        if 'merge_suggestions' in self.reorganization_plan:
            print(f"🔄 合并建议: {len(self.reorganization_plan['merge_suggestions'])} 个")
        
        print("\n💡 注意: 合并操作需要手动执行，因为涉及复杂的视频移动操作")
        print("建议先执行重命名和删除操作，然后手动处理合并")

def main():
    """Main function"""
    print("🚀 YouTube 播放列表执行器")
    print("=" * 50)
    
    executor = YouTubePlaylistExecutor()
    
    # Authenticate
    if not executor.authenticate():
        return
    
    # Load reorganization plan
    if not executor.load_reorganization_plan():
        return
    
    # Show summary
    executor.show_execution_summary()
    
    # Ask for confirmation
    print("\n⚠️ 即将执行播放列表重组操作")
    confirm = input("是否继续? (y/N): ")
    
    if confirm.lower() != 'y':
        print("❌ 操作已取消")
        return
    
    # Execute operations
    print("\n🔄 开始执行重组操作...")
    
    # Execute renames
    executor.execute_rename_suggestions()
    
    # Execute deletes
    executor.execute_delete_suggestions()
    
    print("\n✨ 重组操作完成！")
    print("\n💡 下一步建议:")
    print("   1. 检查重命名结果")
    print("   2. 手动处理合并建议")
    print("   3. 重新运行分析以验证结果")

if __name__ == "__main__":
    main()